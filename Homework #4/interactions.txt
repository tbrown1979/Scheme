Welcome to DrRacket, version 5.3.1 [3m].
Language: R5RS; memory limit: 128 MB.
>Problem 1
>
> (drop 2 '(a b c d e))
(c d e)
> (drop 10 '(a))
()
> (drop 25 (sequence 1 30))
(26 27 28 29 30)
> (drop 0 '(a b c d e))
(a b c d e)
> (drop 5 (sequence 1 5))
()
>
> Problem 2
>
> (any? '(#t))
#t
> (any? '(#f))
#f
> (any? '(#f #f #f #t #f #f))
#t
> (any? '(#f #f #f #f))
#f
> (any? '())
#f
> (any? '(#f #f #f #t))
#t
>
> Problem 3
>
> (count 'a '(a b a c d a e f g a h i j k))
4
> (count 'a '(b c d e f g h i j k))
0
> (count 'xi '(b c d e xi f g xi xi xi))
4
> 
> Problem 4
>
> (detect positive? '(1 -1 2 -2 3 -3 4 -4 -5))
1
> (detect boolean? (list 1 'a 't #t "false" #f '(a . b)))
#t
> (detect number? (list 'a 't #t '(1 2 3) "false" #f '(a . b)))
#f
> (detect pair? (list 'a 't #t '(1 2 3) "false" #f '(a . b)))
(1 2 3)
> (detect (lambda (x)
                 (not (number? x)))
               (list 1 'a 't #t '(1 2 3) "false" #f '(a . b)))
a
> (detect (lambda (n)
                 (> n 1008))
               (sequence 1000 1010))
1009
> (detect (lambda (x)
            (not (eq? x x)))
           (list 1 'a 't #t '(1 2 3) "false" #f '(a . b)))
#f
>
> Problem 5
>
> (positions-of 'a '(a b a c d a e f g a h i j k))
(0 2 5 9)
> (positions-of 'a '(b c d e f g h i j k))
()
> (= (count 'a '(a b a c d a e))
          (length (positions-of 'a '(a b a c d a e))))
#t
> 